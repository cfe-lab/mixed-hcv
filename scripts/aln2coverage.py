"""
Direct conversion from 'aligned' format (produced by sam2aln.py) to
a coverage plot.  Specifically designed for mixed-hcv (HCVDeli) output
which is mapped to a large number of HCV genome references.
Therefore we need to convert from the coordinate system of a specific
HCV genome reference to a single coordinate system (H77).
"""

import sys
import os
import pickle
from csv import DictReader
from matplotlib import pyplot as plt
from glob import glob

h77_length = 9646  # nucleotides

def parse_aligned(aligned_csv):
    coverage = {}
    with open(aligned_csv, 'rU') as f:
        reader = DictReader(f)
        for row in reader:
            coord_map = coord_maps.get(row['refname'], None)
            if coord_map is None:
                print 'ERROR: Failed to retrieve coordinate map for rname', row['refname']
                sys.exit()

            offset = int(row['offset'])
            seq = row['seq']
            count = int(row['count'])
            for i, nuc in enumerate(seq):
                rcoord = offset + i
                if nuc == 'N':
                    # do not count censored bases as coverage
                    continue
                h77_coord = coord_map.get(rcoord, None)
                if h77_coord is None:
                    #print 'missing H77 coordinate for', rcoord
                    continue

                if h77_coord not in coverage:
                    coverage.update({h77_coord: 0})
                coverage[h77_coord] += count
    return coverage

def plot_coverage(coverage, output):
    x = map(lambda i: i+1, range(h77_length))  # display as 1-index
    y = [coverage.get(i, 0) for i in x]
    plt.step(x, y, linewidth=2, where='mid')
    plt.xlim([1, h77_length])
    plt.ylim([1, 1000000])
    plt.yscale('log')
    plt.xlabel('H77 coordinate (nuc)', fontsize=18)
    plt.ylabel('Coverage', fontsize=18)
    plt.savefig(output)


# load coordinate map objects generated by h77-coords.py script
print 'loading H77 coordinate maps from pickle object'
with open('../data/h77-coords.pickle', 'rb') as f:
    coord_maps = pickle.load(f)


files = glob('../working/coverage/15072[04]*/gb-ref+hg38_v2/*.aligned.csv')
print 'found {} aligned CSV files'.format(len(files))

outfile = open('../working/aln2coverage.csv', 'w')
outfile.write('runname,dbname,sample,snum,flags,rcoord,coverage\n')

for aligned_csv in files:
    _, _, _, runname, dbname, filename = aligned_csv.split('/')
    sample, snum, flags = filename.split('.')[0].split('_')
    print runname, dbname, filename

    coverage = parse_aligned(aligned_csv)

    for i in range(h77_length):
        count = coverage.get(i, None)
        outfile.write('%s,%s,%s,%s,%s,%d,%s\n' % (runname, dbname, sample, snum, flags, i,
                                                'NA' if count is None else str(count)))


outfile.close()
